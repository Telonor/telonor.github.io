{"version":3,"sources":["data_source.js","utils.js","pdf_render.js","components/Header/header.jsx","components/MainHeader/main_header.jsx","components/MainInfo/main_info.jsx","components/SkillGroup/skill_group.jsx","components/Skills/skills.jsx","components/Language/language.jsx","components/Languages/languages.jsx","components/ExperienceItemHighlights/experience_item_highlights.js","components/ExperienceItem/experience_item.jsx","components/Experience/experiance.jsx","components/EducationItem/education_item.jsx","components/Education/education.jsx","components/TrainingItem/training_item.jsx","components/Trainings/trainings.jsx","components/CodeSample/code_sample.jsx","components/CodeSamples/code_samples.jsx","components/Additional/additional.jsx","components/MainFooter/main_footer.jsx","components/App.jsx","index.js"],"names":["DataSource","cvData","this","isFilled","Boolean","Object","keys","length","basics","getBasics","skills","getSkills","languages","getLanguages","experience","getExperience","education","getEducation","trainings","getTrainings","codeSamples","getCodeSamples","keyName","result","cvDataExt","concat","getObjKey","additional","getArrayKey","getAge","dateString","today","Date","birthDate","parseISODate","age","getFullYear","m","getMonth","getDate","dateParts","split","getHumanMonth","date","getZeroPaddedMonthStr","monthNum","String","DBY","DBMY","getDateBetweenStr","startDateStr","endDateStr","format","startDate","endDate","endStr","getDateBetweenYStr","startStr","getDateBetweenMYStr","borderOffset","rightColumnX","linkColor","textColor","urlMarkdownPattern","fontName","UrlConfig","text","url","xPosition","yPosition","replaceX","replaceY","PDFRender","dataSource","doc","JsPDF","lineHeight","_page","_pageUserHeight","getPageHeight","_pageUserWidth","getPageWidth","_prevRowY","0","setFont","_renderHeader","_renderBasicInfo","_renderSkills","_renderLanguages","_renderExperience","_renderEducation","_renderTrainings","_renderCodeSamples","_renderAdditionalInfo","_save","fileName","replace","save","internal","getLineHeight","_setPrevRowY","addPage","originText","replaceText","spacesCount","getTextWidth","repeat","y","_buffText","x","maxLen","urlConfigs","match","urlText","urlLink","position","_text","matchesKeys","splitTextToSize","forEach","row","idx","config","indexOf","slice","_getLineInterval","_replaceWithSpaces","_textWithLink","_addPage","_getNextRowY","prototype","toString","call","options","undefined","setTextColor","textWithLink","blank_lines","getStringUnitWidth","getFontSize","scaleFactor","textWidth","_getTextWidth","textOffset","pageSize","getWidth","basicInfo","_setFontBold","setFontSize","_centeredText","_setFontNormal","pageTitle","groupY","skillGroup","index","groupTitle","boldWidth","normalWidth","groupSkillsString","join","splittedToSize","formattedLanguages","language","push","exp","_setFontItalic","_rightAlignedText","_renderLinkMarkdown","highlight","edu","title","trn","trnY","sample","Header","props","downloadCV","bind","render","className","disabled","onClick","Component","MainHeader","MainInfo","SkillGroup","skill_group","Skills","map","key","Language","lang","fluency","Languages","langData","ExperienceItemHighlights","ExperienceItem","source","Experience","EducationItem","ed","Education","TrainingItem","target","href","Trainings","CodeSample","CodeSamples","Additional","MainFooter","React","App","state","fetch","then","response","json","data","JSON","parse","console","log","setState","getResumeData","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.73ee3da2.chunk.js","sourcesContent":["import cvDataExt from './resume_extender';\n\n\nexport default class DataSource {\n    getObjKey(keyName) {\n        let result = {};\n\n        if (keyName in this.cvData && this.cvData[keyName]){\n            result = {...this.cvData[keyName]};\n        }\n\n        if (keyName in cvDataExt && cvDataExt[keyName]){\n            result = {...result, ...cvDataExt[keyName]};\n        }\n\n        return result;\n    }\n\n    getArrayKey(keyName) {\n        let result = [];\n\n        if (keyName in this.cvData && this.cvData[keyName]){\n            result = result.concat(this.cvData[keyName]);\n        }\n\n        if (keyName in cvDataExt && cvDataExt[keyName]){\n            result = result.concat(cvDataExt[keyName]);\n        }\n        return result;\n    }\n\n    getBasics() {\n        let basics = this.getObjKey('basics');\n        const additional = cvDataExt['additional'];\n        const key = 'summary';\n\n        if (Object.keys(this.cvData).length && additional){\n            basics[key] = `${this.cvData['basics']['summary']}. ${cvDataExt['additional']}`;\n        }\n        return basics;\n    }\n\n    getSkills() {\n        return this.getArrayKey('skills');\n    }\n\n    getLanguages() {\n        return this.getArrayKey('languages');\n    }\n\n    getExperience() {\n        return this.getArrayKey('work');\n    }\n\n    getEducation() {\n        return this.getArrayKey('education');\n    }\n\n    getTrainings() {\n        return this.getArrayKey('trainings');\n    }\n\n    getCodeSamples() {\n        return this.getArrayKey('code_samples');\n    }\n\n    constructor(cvData = {}) {\n        this.cvData = cvData;\n\n        this.isFilled = Boolean(Object.keys(cvData).length)\n\n        this.basics = this.getBasics();\n        this.skills = this.getSkills();\n        this.languages = this.getLanguages();\n        this.experience = this.getExperience();\n        this.education = this.getEducation();\n        this.trainings = this.getTrainings();\n        this.codeSamples = this.getCodeSamples();\n    }\n}\n","export function getAge(dateString) {\n    const today = new Date();\n    const birthDate = parseISODate(dateString);\n    let age = today.getFullYear() - birthDate.getFullYear();\n    let m = today.getMonth() - birthDate.getMonth();\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n        age--;\n    }\n    return age;\n}\n\nexport function parseISODate(dateString) {\n    const dateParts = dateString.split('-');\n    return new Date(dateParts[0], dateParts[1] - 1, dateParts[2]);\n}\n\nexport function getHumanMonth(date) {\n    return date.getMonth() + 1;\n}\n\nexport function getZeroPaddedMonthStr(monthNum) {\n    return monthNum > 10 ? String(monthNum) : `0${monthNum}`;\n}\n\nfunction getDateBetweenMYStr(startDateStr, endDateStr) {\n    const startDate = parseISODate(startDateStr);\n    const endDate = endDateStr? parseISODate(endDateStr) : null;\n\n    const startStr = `${getZeroPaddedMonthStr(getHumanMonth(startDate))}.${startDate.getFullYear()}`;\n    const endStr = endDate ? `${getZeroPaddedMonthStr(getHumanMonth(endDate))}.${endDate.getFullYear()}` : 'present';\n    return `${startStr} - ${endStr}`;\n}\n\nfunction getDateBetweenYStr(startDateStr, endDateStr, format) {\n    const startDate = parseISODate(startDateStr);\n\tconst endDate = endDateStr ? parseISODate(endDateStr) : null;\n    const endStr = endDate ? endDate.getFullYear() : 'present';\n    return `${startDate.getFullYear()} - ${endStr}`;\n}\n\nexport const DBY = 'YYYY-YYYY';\nexport const DBMY = 'MM.YYYY-MM.YYYY';\n\nexport function getDateBetweenStr(startDateStr, endDateStr, format) {\n    switch (format) {\n        case DBY:\n            return getDateBetweenYStr(startDateStr, endDateStr);\n        case DBMY:\n            return getDateBetweenMYStr(startDateStr, endDateStr);\n    }\n}\n","import JsPDF from 'jspdf/dist/jspdf.es.js';\nimport { getAge, getDateBetweenStr, DBMY, DBY } from './utils';\n\nconst ptToMM = 0.3528;\nconst borderOffset = 15;\nconst rightColumnX = 60;\nconst linkColor = '#007bff';\nconst textColor = '#000000';\nconst urlMarkdownPattern = /\\[([\\w ]+)\\]\\(([\\w:/\\-._]+)\\)/g;\nconst urlConfigPositionNotSet = -1;\nconst fontName = 'helvetica';\n\n\nclass UrlConfig {\n    constructor(text, url, xPosition=urlConfigPositionNotSet, yPosition=urlConfigPositionNotSet) {\n        this.text = text;\n        this.url = url;\n        // -1 indicates that it was not set yet (for multiline)\n        this.replaceX = xPosition;\n        this.replaceY = yPosition;\n    }\n}\n\n\nexport default class PDFRender {\n    constructor(dataSource) {\n        this.dataSource = dataSource;\n        this.doc = JsPDF({lineHeight: 1.4});\n        this._page = 0;\n        this._pageUserHeight = this.doc.getPageHeight() - 2 * borderOffset;\n        this._pageUserWidth = this.doc.getPageWidth - 2 * borderOffset;\n        this._prevRowY = {\n          0: 0,\n        };\n        this.doc.setFont(fontName);\n    }\n\n    render() {\n        this._renderHeader();\n        this._renderBasicInfo();\n        this._renderSkills();\n        this._renderLanguages();\n        this._renderExperience();\n        this._renderEducation();\n        this._renderTrainings();\n        this._renderCodeSamples();\n        this._renderAdditionalInfo();\n\n        this._save();\n    }\n\n    _save() {\n        const fileName = this.dataSource.basics['name'].replace(' ', '_')\n        this.doc.save(`${fileName}.pdf`);\n    }\n\n    _getLineInterval() {\n        return this.doc.internal.getLineHeight() * ptToMM;\n    }\n\n    _setFontNormal() {\n        this.doc.setFont(fontName, 'normal');\n    };\n\n    _setFontBold() {\n        this.doc.setFont(fontName, 'bold');\n\n    }\n\n    _setFontItalic() {\n        this.doc.setFont(fontName, 'italic');\n    }\n\n    _addPage() {\n        this._page = this._page + 1;\n        this._setPrevRowY(0);\n        this.doc.addPage();\n    }\n\n    _replaceWithSpaces(originText, replaceText) {\n        const replaceTextWidth = this.doc.getTextWidth(replaceText);\n        const spaceWidth = this.doc.getTextWidth(' ');\n        const spacesCount = replaceTextWidth / spaceWidth;\n\n        return originText.replace(replaceText, ' '.repeat(spacesCount));\n    }\n\n    _renderLinkMarkdown(text, y, x=borderOffset, maxLen=0) {\n        // if text contains links\n        // lets for now assume that we may hold only one link with same linkText\n        // linkText doesn't collate with other text in original string\n        // as well as the link should use same font params as other text\n        // @TODO make in possible to hold multiple links with same linkText\n        let urlConfigs = {};\n        let _buffText;\n\n        // replace link markdowns with urlText\n        _buffText = text.replace(\n            urlMarkdownPattern,\n            (match, urlText, urlLink, position) => {\n                // collect information about found link markdowns\n                urlConfigs[urlText] = new UrlConfig(urlText, urlLink);\n                return urlText;\n            }\n        );\n\n        const matchesKeys = Object.keys(urlConfigs);\n        // if we don't have what to replace just print original text\n        if (!matchesKeys.length) {\n            // if we should fit some size\n            let _text;\n            if (maxLen) {\n                _text = this.doc.splitTextToSize(\n                    _buffText,\n                    maxLen\n                );\n            } else {\n                _text = _buffText;\n            }\n\n            this._text(\n                _text,\n                y,\n                x\n            );\n\n            return;\n        }\n\n        // if we are here we have checked that we have link markdown(s)\n        if (maxLen) {\n            // first of all - split text to fit size\n            _buffText = this.doc.splitTextToSize(\n                _buffText,\n                maxLen\n            );\n\n            // for each row in splitted text array try to find and and calculate replace x and y of the url\n            _buffText.forEach(\n                (row, idx) => {\n                    matchesKeys.forEach(\n                        (urlText) => {\n                            const config = urlConfigs[urlText];\n                            const indexOfUrl = row.indexOf(urlText);\n                            if (indexOfUrl !== -1) {\n                                config.replaceX = x + this.doc.getTextWidth(\n                                    row.slice(0, row.indexOf(urlText))\n                                );\n\n                                config.replaceY = y + idx * this._getLineInterval();\n                            }\n                        }\n                    )\n                }\n            );\n\n            // replace urlText with spaces\n            matchesKeys.forEach(\n                (urlText) => {\n                    _buffText.forEach(\n                        (row, idx) => {\n                            _buffText[idx] = this._replaceWithSpaces(row, urlText);\n                        }\n                    );\n\n                }\n            );\n\n\n            // print links\n            matchesKeys.forEach(\n                (urlText) => {\n                    const config = urlConfigs[urlText];\n                    this._textWithLink(\n                        urlText,\n                        config.replaceY,\n                        config.replaceX,\n                        {url: config.url}\n                    );\n                }\n            );\n\n            // just print for now\n            this._text(_buffText, y, x)\n\n        // if we may left text single line\n        } else {\n            // calculate replaceX of the links\n            matchesKeys.forEach(\n                (urlText) => {\n                    const config = urlConfigs[urlText];\n                    config.replaceX = x + this.doc.getTextWidth(\n                        _buffText.slice(0, _buffText.indexOf(urlText))\n                    )\n                }\n            );\n\n            matchesKeys.forEach(\n                (urlText) => {\n                    const config = urlConfigs[urlText];\n                    // replace original linkText with space placeholders\n                    _buffText = this._replaceWithSpaces(_buffText, urlText);\n\n                    // print links first\n                    this._textWithLink(\n                        urlText,\n                        y,\n                        config.replaceX,\n                        {url: config.url}\n                    );\n                }\n            );\n\n            // print origin text with space placeholders for links\n            this._text(\n                _buffText,\n                y,\n                x\n            )\n        }\n    }\n\n    _text(text, y, x=borderOffset) {\n        if (y >= this._pageUserHeight) {\n            this._addPage();\n            y = this._getNextRowY();\n        }\n\n        // it's possible to get string or array of strings as input\n        if (Object.prototype.toString.call(text) === '[object Array]' && text.length > 1) {\n            this._setPrevRowY(y + this._getLineInterval() * (text.length -1));\n        } else {\n            this._setPrevRowY(y);\n        }\n\n        this.doc.text(text, x, y);\n    }\n\n    _setPrevRowY(y) {\n        this._prevRowY[this._page] = y;\n    }\n\n    _textWithLink(text, y, x=borderOffset, options=undefined) {\n        this._setPrevRowY(y);\n        this.doc.setTextColor(linkColor);\n        this.doc.textWithLink(text, x, y, options);\n        this.doc.setTextColor(textColor);\n    }\n\n    _getNextRowY(blank_lines=0) {\n        // et least one blank line should be.\n        if (!this._prevRowY[this._page]) {\n            return borderOffset;\n        }\n        return this._prevRowY[this._page] + this._getLineInterval() * (1 + blank_lines);\n    }\n\n    _getTextWidth(text) {\n        return this.doc.getStringUnitWidth(text) * this.doc.internal.getFontSize() / this.doc.internal.scaleFactor;\n    }\n\n    _centeredText(text, y) {\n        const textWidth = this._getTextWidth(text);\n        const textOffset = (this.doc.internal.pageSize.getWidth() - textWidth) / 2;\n        this._text(text, y, textOffset);\n    }\n\n    _rightAlignedText(text, y) {\n        const textWidth = this._getTextWidth(text);\n        const textOffset = this.doc.internal.pageSize.getWidth() - borderOffset - textWidth;\n        this._text(text, y, textOffset)\n    }\n\n    _renderHeader() {\n        const basicInfo = this.dataSource.basics;\n        this._setFontBold();\n\n        this.doc.setFontSize(14);\n        this._centeredText(basicInfo['name'], this._getNextRowY());\n\n        this.doc.setFontSize(12);\n        this._centeredText(basicInfo['label'], this._getNextRowY());\n    }\n\n    _renderBasicInfo() {\n        const basicInfo = this.dataSource.basics;\n\n        this._setFontNormal();\n        this.doc.setFontSize(11);\n\n        this._text(`Age: ${getAge(basicInfo['bday'])}`, this._getNextRowY(1));\n        this._text(`City: ${basicInfo['location']['city']}`, this._getNextRowY());\n        this._text(`Family status: ${basicInfo['family_status']}`, this._getNextRowY());\n        this._text(`Email: ${basicInfo['email']}`, this._getNextRowY());\n\n        let pageTitle = 'Web-page:';\n        this._text(pageTitle, this._getNextRowY());\n        this._textWithLink(\n            basicInfo['website'],\n            this._prevRowY[this._page],\n            borderOffset + this._getTextWidth(pageTitle) + this._getTextWidth(' '),\n            {url: basicInfo['website']}\n        );\n\n        this._text(`Skype: ${basicInfo['skype']}`, this._getNextRowY());\n    }\n\n    _renderSkills() {\n        const skills = this.dataSource.skills;\n        const groupY = this._getNextRowY(1);\n\n        this._setFontBold();\n        this.doc.setFontSize(10);\n        // left column\n        this._text('Skills:', groupY);\n        // right column\n\n        this._setFontNormal();\n        skills.forEach(\n            (skillGroup, index) => {\n                const y = index ? this._getNextRowY(1) : groupY;\n                const groupTitle = `${skillGroup['name']}: `;\n\n                // prepend with spaces of title length * needed space count\n                // calculate coefficient\n                // save bold title with\n                this._setFontBold();\n                const boldWidth = this.doc.getTextWidth(groupTitle);\n                // save normal title with\n                this._setFontNormal();\n                const normalWidth = this.doc.getTextWidth(' ');\n                const spacesCount = boldWidth / normalWidth;\n\n                const groupSkillsString = `${' '.repeat(spacesCount)} ${skillGroup['keywords'].join(', ')}`;\n                const splittedToSize = this.doc.splitTextToSize(\n                    groupSkillsString,\n                    this.doc.internal.pageSize.getWidth() - borderOffset - rightColumnX\n                );\n\n                // group title\n                this._setFontBold();\n                this._text(\n                    groupTitle,\n                    y,\n                    rightColumnX\n                );\n\n                // group skills\n                this._setFontNormal();\n                this._text(\n                    splittedToSize,\n                    y,\n                    rightColumnX\n                );\n            }\n        );\n    }\n\n    _renderLanguages() {\n        const languages = this.dataSource.languages;\n        const groupY = this._getNextRowY(1);\n        let formattedLanguages = [];\n\n        // left column\n        this._setFontBold();\n        this._text(\n            'Language skills:',\n            groupY\n        );\n\n        // right column\n        this._setFontNormal();\n\n\n        languages.forEach(\n            (language, index) => {\n                formattedLanguages.push(`${language['language']}: ${language['fluency']}`);\n            }\n        )\n        this._text(\n            `${formattedLanguages.join(', ')}`,\n            groupY,\n            rightColumnX,\n        )\n    }\n\n    _renderExperience() {\n        const experience = this.dataSource.experience;\n        const groupY = this._getNextRowY(1);\n\n        // left column\n        this._setFontBold();\n        this._text(\n            'Experience:',\n            groupY\n        );\n\n        // right column\n        experience.forEach(\n            (exp, index) => {\n                const date = getDateBetweenStr(exp['startDate'], exp['endDate'], DBMY);\n\n                // date\n                this._setFontItalic();\n                this._rightAlignedText(\n                    date,\n                    index ? this._getNextRowY() : groupY\n                );\n\n                // company\n                this._setFontBold();\n                this._text(\n                    exp['company'],\n                    this._getNextRowY(),\n                    rightColumnX\n                );\n\n                // position\n                this._text(\n                    exp['position'],\n                    this._getNextRowY(),\n                    rightColumnX\n                );\n\n                // description\n                this._setFontItalic();\n                this._renderLinkMarkdown(\n                    exp['summary'],\n                    this._getNextRowY(),\n                    rightColumnX,\n                    this.doc.internal.pageSize.getWidth() - borderOffset - rightColumnX\n                )\n\n                if ('highlights' in exp) {\n                    this._setFontNormal();\n\n                    exp['highlights'].forEach(\n                        (highlight, idx) => {\n                            this._text(\n                                highlight,\n                                this._getNextRowY(idx ? 0 : 1),\n                                rightColumnX,\n                            )\n                        }\n                    )\n                }\n            }\n        );\n\n    }\n\n    _renderEducation() {\n        const education = this.dataSource.education;\n        const groupY = this._getNextRowY(1);\n\n        // left column\n        this._setFontBold();\n        this._text(\n            'Education:',\n            groupY\n        );\n\n        // right column\n        education.forEach(\n            (edu, index) => {\n                const date = getDateBetweenStr(edu['startDate'], edu['endDate'], DBY);\n                const title = `${edu['institution']}, ${edu['studyType']} degree of ${edu['area']}`;\n\n                this._setFontItalic();\n                this._rightAlignedText(\n                    date,\n                    index ? this._getNextRowY() : groupY,\n                );\n\n                this._setFontNormal();\n                this._text(\n                    title,\n                    this._getNextRowY(),\n                    rightColumnX\n                );\n            }\n        );\n\n\n    }\n\n    _renderTrainings() {\n        const trainings = this.dataSource.trainings;\n        const groupY = this._getNextRowY(1);\n\n        // left column\n        this._setFontBold();\n        this._text(\n            'Trainings:',\n            groupY\n        );\n\n        // right column\n        trainings.forEach(\n            (trn, index) => {\n                const date = getDateBetweenStr(trn['startDate'], trn['endDate'], DBY);\n\n                this._setFontItalic();\n                this._rightAlignedText(\n                    date,\n                    index ? this._getNextRowY() : groupY\n                );\n\n                let trnY = this._getNextRowY();\n\n                this._setFontNormal();\n\n                if (trn.url) {\n                    this._textWithLink(\n                        trn['name'],\n                        trnY,\n                        rightColumnX,\n                        {url: trn['url']}\n                    );\n                } else {\n                    this._text(\n                        trn['name'],\n                        trnY,\n                        rightColumnX,\n                    );\n                }\n\n                if (trn['target']) {\n                    this._text(\n                        ` - ${trn['target']}`,\n                        trnY,\n                        rightColumnX + this._getTextWidth(trn['name'])\n                    );\n                }\n            }\n        )\n    }\n\n    _renderCodeSamples() {\n        const groupY = this._getNextRowY(1);\n        const codeSamples = this.dataSource.codeSamples;\n        // left column\n        this._setFontBold();\n        this._text(\n            'Code samples:',\n            groupY\n        );\n\n        // right column\n        codeSamples.forEach(\n            (sample, index) => {\n\n                this._setFontNormal();\n                this._textWithLink(\n                    sample['name'],\n                    index ? this._getNextRowY() : groupY,\n                    rightColumnX,\n                    {url: sample['url']}\n                );\n            }\n        )\n    }\n\n    _renderAdditionalInfo() {\n        const additional = this.dataSource.basics['summary'];\n        const groupY = this._getNextRowY(1);\n\n        // left column\n        this._setFontBold();\n        this._text(\n            'Additional information: ',\n            groupY\n        );\n\n        // right column\n        // @TODO remove goo.gl link after jsPDF will fix unicode support\n        this._setFontNormal();\n        this._renderLinkMarkdown(\n            additional,\n            groupY,\n            rightColumnX,\n            this.doc.internal.pageSize.getWidth() - rightColumnX - borderOffset\n        );\n    }\n};\n","import React, { Component } from 'react';\nimport PDFRender from '../../pdf_render';\n\nimport './header.css';\n\n\nexport default class Header extends Component {\n\n    constructor(props) {\n        super(props);\n        this.downloadCV = this.downloadCV.bind(this);\n    }\n\n    downloadCV() {\n        if (!this.props.dataSource.isFilled) {\n            return;\n        }\n\n        const renderer = new PDFRender(this.props.dataSource);\n        renderer.render();\n    }\n\n    render() {\n        return (\n            <header className='terminal'>\n                <div className='row'>\n                    <div className='col text-center'>\n\t\t\t            <h1>{this.props.dataSource.basics['nickname']}@localhost:~</h1>\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='col text-left'>\n                        <button\n                            className='btn btn-link download'\n                            disabled={!this.props.dataSource.isFilled}\n                            onClick={this.downloadCV}\n                        >\n                            Download CV\n                        </button>\n                    </div>\n                </div>\n            </header>\n        )\n    }\n}\n","import React, { Component } from 'react';\n\n\nexport default class MainHeader extends Component {\n    render() {\n        const basicInfo = this.props.dataSource.basics\n        return (\n            <figure>\n                <div className='row'>\n                    <div className='col text-center'>\n                        {basicInfo['name']}\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='col text-center'>\n                        {basicInfo['label']}\n                    </div>\n                </div>\n            </figure>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { getAge } from '../../utils';\n\n\nexport default class MainInfo extends Component {\n    render() {\n        if (!this.props.dataSource.isFilled) {\n            return null;\n        }\n\n        const basicInfo = this.props.dataSource.basics;\n        return (\n            <figure>\n                <div className='row'>\n                    <div className='col'>\n                        <span className='nfo-group'>Age</span>\n                        {getAge(basicInfo['bday'])}\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='col'>\n                        <span className='nfo-group'>City</span>\n                        {basicInfo['location']['city']}\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='col'>\n                        <span className='nfo-group'>Family status</span>\n                        {basicInfo['family_status']}\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='col'>\n                        <span className='nfo-group'>E-mail</span>\n                        {basicInfo['email']}\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='col'>\n                        <span className='nfo-group'>Skype</span>\n                        {basicInfo['skype']}\n                    </div>\n                </div>\n            </figure>\n        )\n    }\n}\n","import React, { Component } from 'react';\n\nimport './skill_group.css';\n\nexport default class SkillGroup extends Component {\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-12 col-sm-9 offset-sm-3 col-xl-10 offset-xl-2\">\n                    <span className=\"skill-group\">{this.props.skill_group['name']}</span>\n                    {this.props.skill_group['keywords'].join(', ')}\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport SkillGroup from '../SkillGroup/skill_group';\n\n\nexport default class Skills extends Component {\n    render() {\n        if (!this.props.dataSource.isFilled) {\n            return null;\n        }\n\n        const skills = this.props.dataSource.skills;\n        return (\n            <figure>\n                <div className='row'>\n                    <div className='col-12 col-sm-3 nfo-group'>Skills</div>\n                </div>\n\n                {\n                    skills.map(\n                        (key, idx) => <SkillGroup key={idx} skill_group={key}/>\n                    )\n                }\n            </figure>\n        );\n    }\n}\n","import React, { Component } from 'react';\n\n\nexport default class Language extends Component {\n    render() {\n        return (\n            <div className='row'>\n                <div className='col-12 col-sm-9 offset-sm-3 col-xl-10 offset-xl-2'>{this.props.lang}: {this.props.fluency}</div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport Language from '../Language/language';\n\n\nexport default class Languages extends Component {\n    render() {\n        if (!this.props.dataSource.isFilled) {\n            return null;\n        }\n\n        return (\n            <figure>\n                <div className='row'>\n                    <div className='col-12 col-sm-3 nfo-group'>Language skills</div>\n                </div>\n\n                {\n                    this.props.dataSource.languages.map(\n                        (langData, idx) => <Language key={idx} lang={langData['language']} fluency={langData['fluency']}/>\n                    )\n                }\n            </figure>\n        )\n    }\n}\n","import { Component } from 'react';\n\n\nexport default class ExperienceItemHighlights extends Component {\n    render() {\n        const key = 'highlights';\n\n        if (!key in this.props.exp) {\n            return null;\n        }\n\n        return (\n            <div className='col-12 col-sm-9 offset-sm-3 col-xl-10 offset-xl-2 highlights'>\n                {this.props.exp[key].join(', ')}\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { getDateBetweenStr, DBMY } from '../../utils';\nimport ExperienceItemHighlights from '../ExperienceItemHighlights/experience_item_highlights';\n\nimport './experience_item.css';\n\n\nexport default class ExperienceItem extends Component {\n    render() {\n        const date = getDateBetweenStr(this.props.exp['startDate'], this.props.exp['endDate'], DBMY);\n\n        return (\n            <div className='row experience-item'>\n                <div className='col-12 col-sm-9 col-lg-6 col-xl-6 date'>{date}</div>\n                <div className='col-12 col-sm-3 col-lg-3 offset-lg-3 col-xl-4 offset-xl-2 company-name'>\n                    {this.props.exp['company']}\n                </div>\n                <div className='col-12 col-sm-9 offset-sm-3 col-xl-10 offset-xl-2 position'>\n                    {this.props.exp['position']}\n                </div>\n                <div className='col-12 col-sm-9 offset-sm-3 col-xl-10 offset-xl-2 description'>\n                    <ReactMarkdown source={this.props.exp['summary']}/>\n                </div>\n                <ExperienceItemHighlights exp={this.props.exp}/>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport ExperienceItem from '../ExperienceItem/experience_item';\n\nimport './experience.css';\n\n\nexport default class Experience extends Component {\n    render() {\n        if (!this.props.dataSource.isFilled) {\n            return null;\n        }\n\n        return (\n            <figure className='experience-block'>\n                <div className='row'>\n                    <div className='col-12 nfo-group'>Experience</div>\n                </div>\n\n                {\n                    this.props.dataSource.experience.map(\n                        (exp, idx) => <ExperienceItem key={idx} exp={exp}/>\n                    )\n                }\n            </figure>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { getDateBetweenStr, DBY }from '../../utils';\n\n\nexport default class EducationItem extends Component {\n    render() {\n\tconst title = `${this.props.ed['institution']}, ${this.props.ed['studyType']} degree of ${this.props.ed['area']}`;\n    const date = getDateBetweenStr(this.props.ed['startDate'], this.props.ed['endDate'], DBY);\n\n\treturn (\n            <div className=\"row\">\n                <div className=\"col-12 date\">{date}</div>\n                <div className=\"col-12 col-sm-9 offset-sm-3 col-xl-10 offset-xl-2\">{title}</div>\n            </div>\n        )\n\n    }\n}\n","import React, { Component } from 'react';\nimport EducationItem from '../EducationItem/education_item';\n\n\nexport default class Education extends Component {\n    render() {\n        if (!this.props.dataSource.isFilled) {\n            return null;\n        }\n\n        return (\n            <figure>\n                <div className='row'>\n                    <div className='col-12 nfo-group'>Education</div>\n                </div>\n\n                {\n                    this.props.dataSource.education.map(\n                        (ed, idx) => <EducationItem key={idx} ed={ed}/>\n                    )\n                }\n            </figure>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { getDateBetweenStr, DBY } from '../../utils';\n\n\nexport default class TrainingItem extends Component {\n    render() {\n        const date = getDateBetweenStr(this.props.trn['startDate'], this.props.trn['endDate'], DBY);\n\n        return (\n            <div className='row'>\n                <div className='col-12 date'>{date}</div>\n                <div className='col-12 col-sm-9 offset-sm-3 col-xl-10 offset-xl-2'>\n                    <a target='_blank' href={this.props.trn['url']}>\n                        {this.props.trn['name']}\n                    </a>\n                </div>\n                <div className='col-12 col-sm-9 offset-sm-3 col-xl-10 offset-xl-2'>{this.props.trn['target']}</div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport TrainingItem from '../TrainingItem/training_item';\n\n\nexport default class Trainings extends Component {\n    render() {\n        if (!this.props.dataSource.isFilled) {\n            return null;\n        }\n\n        return (\n            <figure>\n                <div className='row'>\n                    <div className='col nfo-group'>Trainings</div>\n                </div>\n                {\n                    this.props.dataSource.trainings.map(\n                        (trn, idx) => <TrainingItem key={idx} trn={trn}/>\n                    )\n                }\n            </figure>\n        )\n    }\n}\n","import React, { Component } from 'react';\n\n\nexport default class CodeSample extends Component {\n    render() {\n        return (\n            <div className='row'>\n                <div className='col col-sm-9 offset-sm-3 col-xl-10 offset-xl-2'>\n                    <a target='blank' href={this.props.sample['url']}>{this.props.sample['name']}</a>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, {Component} from 'react';\nimport CodeSample from '../CodeSample/code_sample';\n\n\nexport default class CodeSamples extends Component {\n    render() {\n        if (!this.props.dataSource.isFilled) {\n            return null;\n        }\n\n        return (\n            <figure>\n                <div className='row'>\n                    <div className='col nfo-group'>Code samples</div>\n                </div>\n\n                {\n                    this.props.dataSource.codeSamples.map(\n                        (sample, idx) => <CodeSample key={idx} sample={sample}/>\n                    )\n                }\n            </figure>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport ReactMarkdown from 'react-markdown';\n\n\nexport default class Additional extends Component {\n    render() {\n        if (!this.props.dataSource.isFilled) {\n            return null;\n        }\n\n        const basicInfo = this.props.dataSource.basics;\n        return (\n            <figure>\n                <div className='row'>\n                    <div className='col nfo-group'>Additional</div>\n                </div>\n                <div className='row'>\n                    <div className='col col-sm-9 offset-sm-3 col-xl-10 offset-xl-2'>\n                        <ReactMarkdown source={basicInfo['summary']}/>\n                    </div>\n                </div>\n            </figure>\n        )\n    }\n}","import React from 'react';\n\nimport './main_footer.css';\n\n\nexport default class MainFooter extends React.Component {\n    render() {\n        const basicInfo = this.props.dataSource.basics\n        return (\n            <figure className='main-footer'>\n                <div className='row'>\n                    <div className='col terminal-caret'>{basicInfo['nickname']}@localhost ~]$</div>\n                </div>\n            </figure>\n        )\n    }\n}\n","import React, { Component } from 'react';\n\nimport DataSource from '../data_source';\n\nimport Header from './Header/header';\nimport MainHeader from './MainHeader/main_header';\nimport MainInfo from './MainInfo/main_info';\nimport Skills from './Skills/skills';\nimport Languages from './Languages/languages';\nimport Experience from './Experience/experiance';\nimport Education from './Education/education';\nimport Trainings from './Trainings/trainings';\nimport CodeSamples from './CodeSamples/code_samples';\nimport Additional from './Additional/additional';\nimport MainFooter from './MainFooter/main_footer';\n\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSource: new DataSource()\n        }\n    }\n\n    getResumeData() {\n        const jsonUrl = 'https://api.github.com/gists/8e4bbe661c3e8ececbfe2ae86c39e9dd';\n\n        fetch(jsonUrl).then(\n            response => {\n                return response.json();\n            }\n        ).then(\n            data => {\n                const cvData = JSON.parse(data['files']['resume.json']['content']);\n                console.log(cvData);\n                 this.setState(\n                     {dataSource: new DataSource(cvData)}\n                 )\n            }\n        )\n    }\n\n    componentDidMount() {\n        this.getResumeData()\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <Header dataSource={this.state.dataSource}/>\n                <main className=\"terminal terminal-body\">\n                    <MainHeader dataSource={this.state.dataSource}/>\n                    <MainInfo dataSource={this.state.dataSource}/>\n                    <Skills dataSource={this.state.dataSource}/>\n                    <Languages dataSource={this.state.dataSource}/>\n                    <Experience dataSource={this.state.dataSource}/>\n                    <Education dataSource={this.state.dataSource}/>\n                    <Trainings dataSource={this.state.dataSource}/>\n                    <CodeSamples dataSource={this.state.dataSource}/>\n                    <Additional dataSource={this.state.dataSource}/>\n                    <MainFooter dataSource={this.state.dataSource}/>\n                </main>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/style.css';\nimport App from './components/App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n"],"sourceRoot":""}